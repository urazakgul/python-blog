{
  "hash": "fa8bbc7fab77d56f88c1de13e098c680",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Seçim Verilerinin Türkiye Haritasında Görselleştirilmesi\"\nauthor: \"Uraz Akgül\"\ndate: \"2024-04-08\"\n# date-modified: last-modified\ndate-format: \"MMMM D, YYYY\"\ncategories: [Harita, Seçim]\nimage: \"imgs/img_5.png\"\nexecute:\n  eval: false\n---\n\n31 Mart 2024 yerel seçimlerini geride bıraktık ancak biz Türkiye'de yaşayanlar için iki seçim arası kısa bir reklam arası gibi. Önümüzdeki seçimlere hazırlıklı olmak için bu arayı değerlendirmeye devam ediyoruz.\n\nBu uygulamada, CHP'nin iller bazında aldığı oyları harita üzerinde göstereceğiz. `local_elections_province_20240331` isimli JSON dosyasında bulunan verilere [buradan](https://github.com/urazakgul/python-blog/tree/main/posts/post_4){.external target=\"_blank\"} ulaşabilirsiniz.\n\nHarita üzerinde görselleştirme yapmak için `geopandas` kütüphanesini kullanacağız. `geopandas`, isminden de anlaşılacağı üzere, popüler veri bilimi kütüphanesi `pandas`'ı jeo-uzamsal veriler ile destekleyip genişletiyor.\n\nHaritada görselleştirmek için öncelikle Türkiye'nin `.shp` uzantılı dosyasını bulmamız gerekiyor. `.shp`, coğrafi verileri depolamak için kullanılan bir vektör veri formatıdır. [Buradan](https://data.humdata.org/dataset/cod-ab-tur?){.external target=\"_blank\"} `turkey_administrativelevels0_1_2.zip` isimli dosyayı indirebilirsiniz. Eğer bir problem ile karşılaşırsanız [burada](https://github.com/urazakgul/python-blog/tree/main/posts/post_4){.external target=\"_blank\"} bulunan dosyayı da indirebilirsiniz.\n\n**Kullanılacak Kütüphaneler**\n\n::: {#a545da04 .cell execution_count=1}\n``` {.python .cell-code}\nimport json\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n```\n:::\n\n\n**Verilerin Hazırlanması**\n\n`read_file()` fonksiyonu ile `.shp` uzantılı dosyayı içeri aktaralım.\n\n::: {#0930bc57 .cell execution_count=2}\n``` {.python .cell-code}\nshapefile_tr = gpd.read_file('turkey_administrativelevels0_1_2/tur_polbnda_adm1.shp')\n\nprint(shapefile_tr)\n```\n:::\n\n\n![](imgs/img_1.PNG)\n\n`shapefile_tr` ile birleştireceğimiz seçim verilerinin yer aldığı JSON dosyasını içe aktaralım.\n\n::: {#68dbeca0 .cell execution_count=3}\n``` {.python .cell-code}\nwith open('local_elections_province_20240331.json', 'r', encoding='utf-8') as file:\n    data = json.load(file)\n\ndf = pd.DataFrame(data['Data'])\n\nprint(df)\n```\n:::\n\n\n![](imgs/img_2.PNG)\n\n`shapefile_tr` tablosundaki `adm1_tr` sütunu ile `df` tablosundaki `PROVINCE` sütununu kullanarak iki tabloyu birleştireceğiz.\n\n::: {#ab9ef7de .cell execution_count=4}\n``` {.python .cell-code}\nmerged_df = pd.merge(\n  shapefile_tr,\n  df,\n  left_on='adm1_tr',\n  right_on='PROVINCE',\n  how='left'\n)\n```\n:::\n\n\n![](imgs/img_3.PNG)\n\nBirleştirdikten sonra harita aşamasına geçebiliriz.\n\n**Haritanın Oluşturulması**\n\nHaritayı en temiz haliyle görelim.\n\n::: {#c2ed14d3 .cell execution_count=5}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize = (10,10))\nmerged_df.plot(ax=ax)\nplt.show()\n```\n:::\n\n\n![](imgs/img_4.png)\n\nŞimdi verileri haritaya gönderelim ve görselin daha profesyonel görünmesini sağlayalım.\n\n::: {#50421152 .cell execution_count=6}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize = (10,10))\nmerged_df.plot(ax=ax, column='CHP', cmap='Reds')\nax.axis('off')\nax.set_title(\n    '31 Mart 2024 Yerel Seçimleri - Cumhuriyet Halk Partisi Oy Dağılımı',\n    fontdict = {'fontsize': 8}\n)\nax.text(\n    0.95,\n    0.01,\n    \"Veriler Yeni Şafak'ın web sitesinden alınmıştır.\",\n    color='gray',\n    fontsize=6,\n    fontstyle='italic',\n    ha='right',\n    va='bottom',\n    transform=ax.transAxes\n)\nplt.show()\n```\n:::\n\n\n![](imgs/img_5.png)\n\nNeler yaptık? İnceleyelim.\n\nÖncelikle, `plt.subplots()` ile bir `Figure` ve `Axes` nesnesi oluşturuyoruz. Sonrasında, `merged_df` isimli DataFrame'den gelen verileri kullanarak harita oluşturuyoruz ve bu işlemi `plot()` ile gerçekleştiriyoruz. `column` parametresi haritada renk kodlaması yapılacak sütunu belirtirken, `cmap` parametresi renk haritasını belirler. Sadece haritanın görüntülenmesini sağlamak için `ax.axis()` ile eksenleri kapalı hale getiriyoruz. `ax.set_title()` ile haritanın başlığını ayarlıyoruz. Son olarak, `ax.text()` ile sağ alt köşeye bir metin ekliyoruz ve `plt.show()` ile grafiği görüntülüyoruz.\n\nYukarıda sürekli verileri kullandık. Peki, kategorik verileri harita üzerinde nasıl gösterebiliriz?\n\nCHP'nin %50'den az ve çok aldığı illeri görselleştirmek istediğimizi varsayalım.\n\n::: {#1e43acef .cell execution_count=7}\n``` {.python .cell-code}\nmerged_df['CHP_50'] = merged_df['CHP'].apply(\n  lambda x: '%50\\'den az' if x < 50 else '%50\\'den çok'\n)\n```\n:::\n\n\n![](imgs/img_6.PNG)\n\n::: {#6a9f2bc7 .cell execution_count=8}\n``` {.python .cell-code}\ncolors = {\n    \"%50'den az\": \"gray\",\n    \"%50'den çok\": \"black\"\n}\n\ncmap = ListedColormap(list(colors.values()))\n\nfig, ax = plt.subplots(figsize = (10,10))\nmerged_df.plot(\n  ax=ax,\n  column='CHP_50',\n  cmap=cmap,\n  legend=True,\n  legend_kwds={'loc': 'lower left', 'fontsize': 8}\n)\nax.axis('off')\nax.set_title(\n    \"31 Mart 2024 Yerel Seçimleri - Cumhuriyet Halk Partisi'nin %50'den Az ve Çok Aldığı İller\",\n    fontdict = {'fontsize': 8}\n)\nax.text(\n    0.95,\n    0.01,\n    \"Veriler Yeni Şafak'ın web sitesinden alınmıştır.\",\n    color='gray',\n    fontsize=6,\n    fontstyle='italic',\n    ha='right',\n    va='bottom',\n    transform=ax.transAxes\n)\nplt.show()\n```\n:::\n\n\n![](imgs/img_7.png)\n\nFarklı neler yaptık? İnceleyelim.\n\n`colors` isminde bir sözlük tanımladık. Bu sözlük, görselleştirmede kullanılacak renkleri ve bunlara karşılık gelen kategorileri içeriyor. Ayrıca, `cmap` isminde bir `ListedColormap` nesnesi oluşturduk. Bu, renk paletini belirtiyor ve `colors` sözlüğünden alınan renklerle oluşturuluyor. Önceki haritada olmayan, bu haritada sol alt köşede bulunan lejant ise kategorilerin tanımlarını içeriyor.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}