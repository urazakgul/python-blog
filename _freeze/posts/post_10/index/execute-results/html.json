{
  "hash": "f179ac84c2b026114a38ce9b7a3ea483",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Rutin Görevlerin Otomatize Edilmesi: Outlook ve Görev Zamanlayıcının Kullanılması\"\nauthor: \"Uraz Akgül\"\ndate: \"2024-04-23\"\ndate-modified: last-modified\ndate-format: \"MMMM D, YYYY\"\ncategories: [Otomatize, Outlook, Görev Zamanlayıcı]\nimage: \"imgs/img_6.PNG\"\nexecute:\n  eval: false\n---\n\nİş verimliliğini artırmak için rutin görevlerin otomatize edilmesini önemsiyorum. Tekrarlayan rutin görevlerin otomatize edilmesi, çalışanların değerli zamanlarını stratejik ve yaratıcı faaliyetlere odaklamalarını sağlayabilir.\n\nBu uygulamada, Windows Görev Zamanlayıcı (Task Scheduler) ile belirlediğimiz rutin görevin otomatik olarak çalıştırılmasını sağlayacağız.\n\nRutin görevimiz şöyle olacak: Belirlediğimiz kripto paraların 52 + 1 haftalık kapanış fiyatlarını alacağız ve her birinin getiri ortalaması ile standart sapmasını hesaplayacağız. Getiri ortalamaları ile standart sapmaları grafik üzerine aktaracağız. Grafiği ve verileri sırasıyla PNG ve XLSX formatlarında kaydedeceğiz. Tüm bu bilgileri Microsoft Outlook uygulaması aracılığıyla göndereceğiz.\n\n**Kullanılacak Kütüphaneler**\n\n::: {#c003cb95 .cell execution_count=1}\n``` {.python .cell-code}\nimport win32com.client as win32\nimport os\nfrom datetime import datetime, timedelta\nimport yfinance as yf\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n**Gönderilecek Verilerin Çekilmesi, Hesaplamaların Yapılması ve Grafiğin Oluşturulması**\n\n::: {#4bf3b8ad .cell execution_count=2}\n``` {.python .cell-code}\ntickers = ['BTC-USD','ETH-USD','SOL-USD','XRP-USD','DOGE-USD','ADA-USD','AVAX-USD','DOT-USD','NEAR-USD','RNDR-USD']\n\ntoday_date = datetime.today().date()\nstart_date = today_date - timedelta(weeks=53)\n\ndf = yf.download(\n    tickers=tickers,\n    start=start_date,\n    end=today_date,\n    progress=False\n)\n\ndaily_returns = df['Adj Close'].pct_change()\n\n# print(daily_returns)\n\ndaily_returns.to_excel('cryptocurrency_returns_data.xlsx')\n\nstd_devs = daily_returns.std()\nmeans = daily_returns.mean()\n\nplt.figure(figsize=(10, 6))\nfor ticker in tickers:\n    plt.scatter(std_devs[ticker], means[ticker], s=100)\n    plt.text(std_devs[ticker], means[ticker], ticker, fontsize=8, ha='right', va='bottom')\n\nplt.title('Average and Standard Deviation of 52-Week Returns of Tracked Cryptocurrencies')\nplt.xlabel('Standard Deviation')\nplt.ylabel('Average')\nplt.grid(True)\nplt.savefig('cryptocurrency_returns_chart.png')\n# plt.show()\n```\n:::\n\n\nGönderilecek grafik:\n\n![](imgs/img_1.png)\n\nGönderilecek excel dosyası içeriği:\n\n![](imgs/img_2.PNG)\n\n**Outlook Mail İçeriğinin Hazırlanması**\n\n::: {#15130a39 .cell execution_count=3}\n``` {.python .cell-code}\noutlook = win32.Dispatch('outlook.application')\nmail = outlook.CreateItem(0)\n\nmail.Subject = 'Cryptocurrency Returns Chart as of ' + datetime.now().strftime('%#d %b %Y %H:%M')\nmail.To = 'urazdev@gmail.com'\n\nattachment = mail.Attachments.Add(os.getcwd() + '\\cryptocurrency_returns_chart.png')\nattachment.PropertyAccessor.SetProperty('http://schemas.microsoft.com/mapi/proptag/0x3712001F', 'cryptocurrency_returns_chart')\n\nmail.HTMLBody = r\"\"\"\nDear Uraz,<br><br>\nThe chart illustrating the average return and standard deviation for each cryptocurrency is as follows:<br><br>\n<img src=\"cid:cryptocurrency_returns_chart\"><br><br>\nPlease find attached the Excel file containing the 52-week returns data for the tracked cryptocurrencies.<br><br>\nBest regards,<br>\n@urazdev\n\"\"\"\n\nmail.Attachments.Add(os.getcwd() + '\\cryptocurrency_returns_data.xlsx')\n\nmail.Send()\n```\n:::\n\n\n`win32com.client` modülünün `Dispatch` fonksiyonu Outlook uygulaması oluşturur. Bu, Windows üzerinde Outlook'u otomatik olarak başlatmak ve programı kontrol etmek için kullanılır.\n\n`CreateItem` fonksiyonu, Outlook uygulaması üzerinden yeni bir öğe oluşturur. Burada `0` parametresi, bir e-posta öğesi oluşturmak için kullanılan sabit değerdir.\n\n`mail.Subject`, e-postanın başlığını belirtir.\n\n`mail.To`, e-postanın gönderileceği alıcı adresini belirtir.\n\n`mail.Attachments.Add()`, e-postaya bir ek ekler. Bunu hem PNG hem de XLSX için kullanıyoruz.\n\n`attachment.PropertyAccessor.SetProperty()`, eklenen dosyanın özelliklerini ayarlar. `http://schemas.microsoft.com/mapi/proptag/0x3712001F`, ek dosyanın gömülü dosya ismini belirlemek için kullanılır.\n\n`mail.HTMLBody`, e-postanın HTML biçimindeki gövdesini tanımlar.\n\n`mail.Send()`, oluşturulan e-postayı gönderir.\n\n**Görev Zamanlayıcı Uygulamasına Görev Girilmesi**\n\nGörev Zamanlayıcı uygulamasını açıyoruz ve `Create Task`'e tıklıyoruz.\n\nGeneral:\n\n![](imgs/img_3.PNG)\n\nTrigger:\n\n![](imgs/img_4.PNG)\n\nActions:\n\n![](imgs/img_5.PNG)\n\nProgram/Script için Python .exe dosyasının bulunduğu dosya konumu .exe uzantılı dosya ile girilmelidir. Bunun için CMD'de `where python` komutu çalıştırılabilir. Add arguments için çalıştırılacak script'in bulunduğu dosya konumu .py uzantılı dosya ile girilmelidir. Start in için çalıştırılacak script'in bulunduğu dosyanın konumu girilmelidir.\n\n**Test**\n\n![](imgs/img_6.PNG)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}