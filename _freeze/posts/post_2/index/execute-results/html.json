{
  "hash": "cf921f53354d3bc7a60153ca488b838f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Korelasyon Tahmin Oyunu\"\nauthor: \"Uraz Akgül\"\ndate: \"2024-03-24\"\n# date-modified: last-modified\ndate-format: \"MMMM D, YYYY\"\ncategories: [Oyun, Web Uygulaması]\n# image: \"\"\nexecute:\n  eval: false\n---\n\nKorelasyon tahmin oyunu yapımında nelere ihtiyacımız olabilir?\n\nBirincisi, iki adet rassal seri üretmeliyiz ve bu serileri üretirken korelasyon katsayısını dikkate almalıyız. Buradaki korelasyon katsayısı Pearson'ı ifade etmektedir. Rassal serileri üretmek için `numpy` kütüphanesinin `np.random.multivariate_normal` fonksiyonundan faydalanabiliriz.\n\nİkincisi, kullanıcı için bir skorlama yapmalıyız. Bunun için RMSE (Root Mean Squared Error, Kök Ortalama Kare Hatası) metriğini kullanabiliriz. RMSE skoru düştükçe başarı artacaktır.\n\nÜçüncüsü, kullanıcı ile etkileşimde olmalıyız. Etkileşim için Streamlit ile bir web uygulaması yapabiliriz. Uygulamayı lokalde çalıştıracağız.\n\n**Kullanılacak Kütüphaneler**\n\n::: {#4799d15f .cell execution_count=1}\n``` {.python .cell-code}\nimport streamlit as st\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n**Korelasyonlu Rassal Serilerin Üretilmesi**\n\n::: {#4305975c .cell execution_count=2}\n``` {.python .cell-code}\ndef generate_correlated_data():\n    num_points = int(np.random.uniform(low=100, high=1000))\n    rho = round(np.random.uniform(low=-1, high=1), 2)\n    cov_matrix = np.array([[1, rho], [rho, 1]])\n    mu = [0, 0]\n    correlated_data = np.random.multivariate_normal(mean=mu, cov=cov_matrix, size=num_points)\n    return correlated_data, rho\n```\n:::\n\n\nFonksiyonumuzun ismini `generate_correlated_data` olarak belirledik ve fonksiyonumuzun herhangi bir parametresi bulunmamaktadır.\n\n`num_points` değişkeni, 100 ile 1000 arasında olmak üzere rassal olarak üretilecek serilere ait verilerin uzunluğunu temsil etmektedir. Bu değeri üretebilmek için `numpy` kütüphanesinin `np.random.uniform` fonksiyonunu kullandık ve `int()` ile değerin tam sayı veri tipinde olmasını sağladık.\n\n`rho` değişkeni, -1 ile 1 arasında rassal olarak olarak üretilmiş bir korelasyon katsayısını temsil etmektedir. Bu değeri üretebilmek için `np.random.uniform` fonksiyonunu kullandık. `rho` değerini noktadan sonra iki rakam gelecek şekilde ayarladık.\n\n`cov_matrix` değişkeni, 2x2'lik bir kovaryans matrisini temsil etmektedir.\n\n`mu` değişkeni, veri kümesinin her bir boyutu için belirlenen ortalama değeri temsil etmektedir. Bu değer 0 olacağı için X ve Y `[0, 0]`'dır.\n\n`correlated_data` değişkeni, `np.random.multivariate_normal` fonksiyonu yardımıyla üretilen verileri temsil etmektedir. Bu fonksiyon, çok değişkenli bir normal dağılımdan rassal örnekler üretir. Fonksiyonun içerisine parametre olarak ortalama, kovaryans matrisi ve örnek büyüklüğü girilir.\n\n`generate_correlated_data` fonksiyonu bize `correlated_data` ve `rho` değerlerini dönüyor. `correlated_data` değişkenindeki ilk seriye `correlated_data[:,0]`; ikinci seriye `correlated_data[:,1]` ile ulaşılabilir.\n\nFonksiyonun döndüğü değerleri kullanarak bir görselleştirme yapalım.\n\n::: {#5f6f79fa .cell execution_count=3}\n``` {.python .cell-code}\ncorrelated_data, rho = generate_correlated_data()\n\n# print(f'Randomly selected correlation: {rho}')\n\nplt.figure(figsize=(8, 6))\nplt.scatter(correlated_data[:,0], correlated_data[:,1], alpha=0.7)\nplt.title('Scatter Plot of Correlated Data')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.grid(True)\nplt.show()\n```\n:::\n\n\n![](imgs/img_1.png)\n\nBir diğer fonksiyonumuz olan ve RMSE değerini hesaplayan `calculate_rmse` fonksiyonuna bakalım.\n\n$\\mathrm{RMSE} = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}$\n\n::: {#dadd7f9d .cell execution_count=4}\n``` {.python .cell-code}\ndef calculate_rmse(predictions, actuals):\n    mse = np.mean((predictions - actuals) ** 2)\n    rmse = round(np.sqrt(mse), 4)\n    return rmse\n```\n:::\n\n\n`calculate_rmse` fonksiyonu, `predictions` ve `actuals` olmak üzere 2 adet parametre alıyor. Önce `mse` değişkenine tahminler ile gerçek değerler arasındaki farkların karelerinin ortalamasını gönderiyoruz. Ardından da bu ortalamanın karekökünü `rmse` değişkenine atıyoruz ve bu değeri noktadan sonra 4 rakam olacak şekilde döndürüyoruz.\n\nKodların ana yapısını oluşturduk.\n\n**Streamlit Web Uygulamasının Yapımı**\n\nWeb uygulaması tarafında kullanılan kodlar aşağıdadır.\n\n::: {#f1bb32b2 .cell execution_count=5}\n``` {.python .cell-code}\n# Oturum durumu değişkenlerinin tanımlanması ve varsayılan değerlerin ayarlanması\nst.session_state.setdefault('rhos', []) # Korelasyon katsayıları\nst.session_state.setdefault('guesses', []) # Kullanıcının tahminleri\nst.session_state.setdefault('rmse_values', []) # RMSE değeri\nst.session_state.setdefault('plots', []) # Görseller\n\n# Korelasyonlu veri oluşturan fonksiyon\ndef generate_correlated_data():\n    num_points = int(np.random.uniform(low=100, high=1000))\n    rho = round(np.random.uniform(low=-1, high=1), 2)\n    cov_matrix = np.array([[1, rho], [rho, 1]])\n    mu = [0, 0]\n    correlated_data = np.random.multivariate_normal(mean=mu, cov=cov_matrix, size=num_points)\n    return correlated_data, rho\n\n# RMSE hesaplayan fonksiyon\ndef calculate_rmse(predictions, actuals):\n    mse = np.mean((predictions - actuals) ** 2)\n    rmse = round(np.sqrt(mse), 4)\n    return rmse\n\n# 'rhos' listesi boş ise yeni bir korelasyonlu veri oluşturulması ve korelasyon katsayısının kaydedilmesi\nif len(st.session_state['rhos']) == 0:\n    correlated_data, rho = generate_correlated_data()\n    st.session_state['rhos'].append(rho)\n\n# 'plots' listesi boşsa ilk görselin oluşturulması ve kaydedilmesi\nif len(st.session_state['plots']) == 0:\n    plt.figure(figsize=(8, 6))\n    plt.scatter(correlated_data[:,0], correlated_data[:,1], alpha=0.7)\n    plt.title('Scatter Plot of Correlated Data')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.grid(True)\n    st.session_state['plots'].append(plt)\n    st.pyplot(st.session_state['plots'][0])\n\n# Kullanıcının tahmini\nuser_guess = st.sidebar.text_input(\n    label='Your Guess:',\n    value='0.0'\n)\n\n# Kullanıcı tahmininin ondalık sayıya dönüştürülmesi\nuser_guess = float(user_guess)\n\n# Tahmin butonunun oluşturulması\nguess_button = st.sidebar.button(label='Guess')\n\n# Tahmin butonuna basıldığında yapılacaklar\nif guess_button:\n    correlated_data, rho = generate_correlated_data()\n    st.session_state['rhos'].append(rho)\n    st.session_state['guesses'].append(user_guess)\n    rmse = calculate_rmse(np.array(st.session_state['rhos'][:-1]), np.array(st.session_state['guesses']))\n    st.session_state['rmse_values'].append(rmse)\n\n    st.subheader(f'Guess: {st.session_state[\"guesses\"][-1]}, Actual: {st.session_state[\"rhos\"][-2]}, RMSE: {st.session_state[\"rmse_values\"][-1]}')\n\n    plt.figure(figsize=(8, 6))\n    plt.scatter(correlated_data[:,0], correlated_data[:,1], alpha=0.7)\n    plt.title('Scatter Plot of Correlated Data')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.grid(True)\n    st.session_state['plots'].append(plt)\n    st.pyplot(st.session_state['plots'][-1])\n```\n:::\n\n\nWindows/Visual Studio Code için bir not: Streamlit uygulamasının yapımında kullanılacak olan kodları `.py` uzantılı `app.py` isminde bir script'e kaydedip terminalden `streamlit run app.py` komutu ile çalıştırabilirsiniz.\n\n*Gelecek içeriklerde görüşmek dileğiyle.*\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}